--
-- Dumping data for table `wiki_topic`
--

INSERT INTO wiki_topic (id_topic, namespace, page_name, page_title, page_view_role, page_edit_role) VALUES (2,0,'home','Accueil','none','none');
INSERT INTO wiki_topic (id_topic, namespace, page_name, page_title, page_view_role, page_edit_role) VALUES (3,0,'naming_conventions','Règles de nommage','none','none');
INSERT INTO wiki_topic (id_topic, namespace, page_name, page_title, page_view_role, page_edit_role) VALUES (4,0,'coding_conventions','Règles de codage','none','none');
INSERT INTO wiki_topic (id_topic, namespace, page_name, page_title, page_view_role, page_edit_role) VALUES (5,0,'documentation','Lutèce : Normes de Documentation','none','none');
INSERT INTO wiki_topic (id_topic, namespace, page_name, page_title, page_view_role, page_edit_role) VALUES (6,0,'logging_rules','Règles de logging','none','none');
INSERT INTO wiki_topic (id_topic, namespace, page_name, page_title, page_view_role, page_edit_role) VALUES (7,0,'checkcode_rules','Règles Checkstyle et PMD','none','none');
INSERT INTO wiki_topic (id_topic, namespace, page_name, page_title, page_view_role, page_edit_role) VALUES (8,0,'howto_create_plugin','Les plugins de Lutece','none','none');
INSERT INTO wiki_topic (id_topic, namespace, page_name, page_title, page_view_role, page_edit_role) VALUES (9,0,'howto_create_admin_feature','Créer des nouvelles fonctionnalités d\'administration','none','none');



--
-- Dumping data for table `wiki_topic_version`
--

INSERT INTO `wiki_topic_version` (`id_topic_version`, `edit_comment`, `id_topic`, `lutece_user_id`, `date_edition`, `id_topic_version_previous`, `wiki_content`) VALUES 
(2,'',2,'admin','2014-05-09 08:22:29',0,'== Développement ==\r\n=== Normes ===\r\n* [[naming_conventions]]\r\n* [[coding_conventions]]\r\n* [[documentation]]\r\n* [[logging_rules]]\r\n* [[checkcode_rules]]\r\n\r\n=== Howto ===\r\n* [[howto_create_plugin]]\r\n* [[howto_create_admin_feature]]\r\n* [[howto_create_portlet]]\r\n* [[howto_create_xpage]]\r\n* [[howto_create_servlet_filter]]\r\n* [[howto_create_content_service]]\r\n* [[howto_create_linkservice]]\r\n* [[howto_create_pageinclude]]\r\n'),
(3,'',3,'admin','2014-05-09 05:45:05',0,'==Règles de nommage==\r\n----\r\n\r\nToutes les règles de nommage décrites ici doivent être\r\nvérifiées à l’aide des outils checkstyleet PMD. Ces outils doivent être configurés de façon à\r\nsupporter les règles de nommage spécifiques, en utilisant\r\nles fichiers de configuration fournis par la DSTI.\r\n===Principes généraux===\r\n\r\nLes noms des identificateurs doivent respecter les règles\r\nsuivantes:\r\n\r\n\r\n* Etre des noms communément utilisés pour désigner l’objet\r\n* Ne pas introduire de contresens ou de problème d’interprétation\r\n* Etre en langue anglaise\r\n* Ne jamais être tronqués ou contractés\r\n\r\nNe pas utiliser les constantes ou les variables pour\r\nstocker des messages d’erreurs en dur (utilisation des\r\nfichiers properties dédiés). En règle général éviter toute\r\nvaleur en dur, utiliser au maximum les fichiers de\r\npropriétés .properties de l’application ou des plugins.\r\n\r\nNe pas utiliser de chemins absolus (les seuls chemins\r\nabsolus utilisés sont stockés dans les paramètres existant\r\ndu fichier config.properties).\r\n===Variables=== \r\n\r\nLes types de base de Java doivent avoir les préfixes\r\nsuivants:\r\n\r\n|=Préfixe|=Type|\r\n|n|int|\r\n|str|String|\r\n|b|boolean|\r\n|l|long|\r\n\r\nLes instances d\'objet doivent être préfixées par le nom de\r\nla classe ou la partie représentative du nom de la classe\r\nindiquant le plus précisément possible le type\r\nd\'objet .\r\n\r\n|=Classe|=Exemple d’instance de la classe|\r\n|HtmlTemplate|tList|\r\n|StringBuffer|sbXml|\r\n|Date|dateBegin|\r\n|List, ArrayList|listUsers|\r\n\r\nMise en forme : Notation Hongroise à l\'exception de\r\nl\'initiale en minuscules, pas d\'underscore. Les\r\nabréviations sont à éviter.\r\n\r\nLes variables d’instance (static ou non) doivent être\r\npréfixées par un underscore.\r\n===Constantes===\r\n\r\nToute valeur littérale de chaîne de caractères ou numérique\r\ndoit être placée dans une constante. Les déclarations des\r\nconstantes doivent être faites dans les premières lignes du\r\nsource ou dans une classe spéciale dédiée aux\r\nconstantes.\r\n\r\nLes préfixes doivent indiquer la nature de la constante.\r\nLes préfixes courants sont :\r\n\r\n|=Préfixe|=Type|\r\n|PATH_|Pour les chemins des répertoires|\r\n|PROPERTY_|Pour les noms de clé d\'un fichier .properties|\r\n|TEMPLATE_|Pour les noms des templates HTML|\r\n|BOOKMARK_|Pour les noms des signets à substituer dans les templates|\r\n|MESSAGE_|Pour les messages ou les clés de message utilisées par Message.jsp|\r\n|JSP_URL_|pour les url des JSP|\r\n|PARAMETER_|pour le nom d’un paramètre de la requête HTTP|\r\n\r\nMise en forme des constantes : tout en majuscules, mots\r\nséparés par des underscores.\r\n\r\nPour un plugin d\'une certaine taille, les constantes pourront être regoupées\r\ndans une classe **fr.paris.lutece.plugins.myplugins.web.Constants** .\r\n===Objets de base de données===\r\n\r\nTous les noms de table et de colonne doivent être en minuscules en séparant \r\nles mots par des underscores.\r\nTous les noms de table doivent être préfixés par nom du plugin_ à l\'exception des tables\r\ndu noyau qui sont préfixées par core_.\r\n===Les requêtes SQL===\r\n\r\nLes requêtes SQL des classes DAO (couche métier) doivent\r\nêtre placées dans des variables de type string et\r\ndoivent respecter la forme suivante:\r\n\r\n\r\n* mots clés en majuscules (SELECT, UPDATE, WHERE , AND …),\r\n* noms des colonnes en minuscules,\r\n* alias des noms de colonnes sous forme de lettres de l’alphabet\r\n\r\nExemple de syntaxe:\r\n\r\nString strSQL = SELECT a.id_theme, a.description_theme \\\r\nFROM theme a, theme_newsletter b WHERE \\\r\na.id_theme = b.id_theme and b.id_newsletter = ? ;===Fichiers templates===\r\n\r\nExtension : .html \r\n\r\nMise en forme : tout en minuscules, mots séparés par des\r\nunderscores, pas d’utilisation de tirets, langue anglaise, pas d’abréviations.\r\n\r\nRègles de nommage pour les fichiers servant à un traitement\r\nstandard:\r\n**create_fonctionnalité.html** pour\r\nl’affichage d’une page de création,\r\n**modify_fonctionnalité.html** pour une page de\r\nmodification,\r\n**remove_fonctionnalité.html** pour une\r\npage permettant une suppression,\r\n**manage_fonctionnalité.html** pour l’affichage d’une\r\npage de gestion d’une fonctionnalité,\r\n**view_fonctionnalité.html** pour une page d’affichage\r\nd’une fiche, **confirm_fonctionnalité.html** pour\r\nune page de message de confirmation,\r\n**fonctionnalité_list.html** pour une page d’affichage\r\nd’une liste.\r\n**fonctionnalité_row.html** pour l’affichage d\'une ligne\r\nd’une liste.\r\n\r\nRègle de nommage des signets servant à la substitution des\r\nvaleurs des Bookmarks: langue anglaise, minuscules,\r\nmots séparés par des underscores, pas d’abréviation ni de\r\ntirets. (ex: **@file_name@** )\r\n===Fichiers JSP===\r\n\r\nMise en forme : Notation Hongroise, langue anglaise, pas\r\nd’abréviation, pas de tirets,pas d\'underscore;\r\n\r\nRègles de nommages pour les fichiers servant à un traitement\r\nd’affichage standard: **CreateFonctionnalité.jsp** pour les pages servant à un traitement d’affichage de page de\r\ncréation, **ModifyFonctionnalité.jsp** pour les pages\r\nservant à un traitement d’affichage de page de modification ,\r\n**RemoveFonctionnalité.jsp** pour les pages servant à un\r\ntraitement d’affichage de page de suppression,\r\n**ManageFonctionnalité.jsp** pour les pages servant à un\r\ntraitement d’affichage de page de gestion,\r\n**ViewFonctionnalité.jsp** pour les pages servant à un\r\ntraitement d’affichage de page de la fiche de la\r\nfonctionnalité, **ConfirmFonctionnalité.jsp** pour les\r\npages servant à un traitement d’affichage de la page de\r\nconfirmation , **Fonctionnalité List.jsp** pour les pages\r\nservant un traitement d’affichage de liste.\r\n\r\nMêmes règles de nommage pour les Jsp de traitements sans\r\naffichage, auxquelles s’ajoute le préfixe Do (\r\nex: **DoCreateFonctionnalité.jsp** ,\r\n**DoModifyFonctionnalité.jsp** … )\r\n===Fichiers images===\r\n\r\nRègle de nommage: langue anglaise, utilisation de\r\nminuscule et d’underscores entre les mots, pas de tirets ni\r\nd’abréviation. Les préfixes utilisés doivent correspondre à\r\nla fonction de l’image quand elle existe:\r\n\r\n|=Préfixe|=Type|\r\n|b_|Images servant de bouton|\r\n|i_|Images servant d icône (ex : i_delete.gif)|\r\n|l_|Images d’une ligne|\r\n\r\nLe format des images servant à la présentation des pages\r\ndoivent être au format .gif.\r\n===Fichiers xml===\r\n\r\nLes balises xml utilisées dans l’application devront être\r\nen minuscules, séparés par des tirets lorsqu’il s’agit de\r\nmots composés, en langue anglaise, sans abréviations.\r\n\r\nLes noms des balises devront être le plus proche possible\r\ndu modèle qu’ils doivent représenter: par exemple\r\n«portlet-id» pour la balise stockant la valeur\r\nde l’identifiant du portlet récupéré dans la colonne\r\nid_portletde la table portlet.'),
(4,'',4,'admin','2014-05-09 06:18:33',0,'==Règles de codage==\r\n----\r\n\r\n\r\n===Mise en forme et présentation du code Java===\r\n\r\nPour faciliter sa lecture, le code doit respecter des règles de mise en\r\nforme appliquées à l\'ensemble des sources.\r\n\r\nLes principales règles concernant Lutèce sont :\r\n\r\n\r\n* Parenthèses sur une nouvelle ligne (Style C/C++) \r\n* Indentation de 4 caractères\r\n\r\nAfin de garantir le formatage du code, l’outil Jalopy doit être utilisé\r\navec le fichier de configuration de Lutèce.\r\n\r\nLa présentation générale des fichiers devra respecter\r\ncelle existante (pour les classes java la présentation des\r\ncommentaires, indentation du code, utilisation de\r\nl’anglais….)\r\n\r\nL’ensemble de l’application doit conserver une homogénéité\r\ncomplète tant sur la présentation du code que sur les\r\nrègles de nommages, l’utilisation de l’anglais, l’insertion\r\nde commentaires….\r\n\r\nTous les fichiers sources doivent comporter la licence de diffusion en\r\nentête.\r\n===Code HTML : les normes HTML===\r\n\r\nLe code HTML produit par Lutèce et notamment celui des templates doit\r\nêtre conforme à la recommandation XHTML 1.0 stricte définie par le W3C (http://www.w3.org/TR/xhtml1/).\r\nLes recommandations du W3C concernant l\'accessibilité doivent également\r\nêtre respectées (http://www.w3.org/WAI/,\r\nHTML Techniques for\r\nWAI 1.0: http://www.w3.org/TR/WCAG10-HTML-TECHS/)\r\n===Le Javascript===\r\n\r\nL\'usage du javascript doit être limité au maximum en raison des problèmes\r\nd\'accessibilité engendrés et des problèmes liés aux utilisateurs qui désactivent\r\nl\'exécution des scripts dans leurs navigateurs.\r\n\r\n//**ATTENTION : ** // \r\n//L\'application doit impérativement rester opérationnelle lorsque les scripts sont désactivés.// ===Les Styles CSS=== \r\n\r\nTous les attributs de mise en forme du code HTML doivent être gérés par\r\ndes feuilles de style CSS2 dont les spécifications sont définies par le\r\nW3C (http://www.w3.org/TR/REC-CSS2/).\r\n\r\nLes styles devront utiliser au maximum l\'héritage et les surcharges devront être limitées au maximum.\r\n===Requête SQL : norme SQL-92===\r\n\r\nToutes les requêtes SQL (présentes dans les scripts SQL ou dans les DAO) doivent suivres la liste de règles ci-dessous afin\r\n	de respecter au maximum la norme SQL-92. Tous les formats de \r\n	données ou syntaxes spécifiques à un Système de Gestion de Base de Données (SGBD) doit être évité afin de garantir la possibilité \r\n	d\'utilisation de Lutèce avec différents SGBD. \r\n|=Description|=Exemple de syntaxe SQL spécifique (MySQL)|=Syntaxe SQL-92 équivalente à utiliser|\r\n|Les caractères anti-côtes utilisés pour les noms de tables ou de colonnes doivent être supprimés|CREATE TABLE core_admin_auth_db_module|CREATE TABLE core_admin_auth_db_module|\r\n|La définition de l\'encodage pour une colone ou une table doit être supprimé|CREATE TABLE ... (access_code VARCHAR(16) collate utf8_unicode_ci,|CREATE TABLE ... (access_code VARCHAR(16),|\r\n|Lors de la création d\'une table, pour une colonne, la déclaration de la valeur par défaut et le fait \r\n	que cette colonne puisse stocker une valeur NULLdoit être respecter un ordre donnée|CREATE TABLE ... (access_code VARCHAR(16) NOT NULL DEFAULT |CREATE TABLE ... (access_code VARCHAR(16) DEFAULT \'\' NOT NULL|\r\n|Lors de la création d\'une table, le moteur de stockage ainsi que l\'encodage ne doivent pas être spécifiés|CREATE TABLE ... ( ... ) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;|CREATE TABLE ... ( ... ) ;|\r\n|Les tailles des champs de type entier (INT, SMALLINT, ...) ne doivent pas être spécifiées|CREATE TABLE ... (id_mailinglist INT(11)NOT NULL DEFAULT \'0\',|CREATE TABLE ... (id_mailinglist INT NOT NULL DEFAULT \'0\',|\r\n|Suppression des types de données non signées.|CREATE TABLE ... (id_mailinglist INT UNSIGNEDNOT NULL DEFAULT \'0\',|CREATE TABLE ... (id_mailinglist INT NOT NULL DEFAULT \'0\',|\r\n|Déclaration des index de manière explicite et non lors de la définition de la table|CREATE TABLE core_admin_right ( ... , KEY index_right (level_right, admin_url))|CREATE TABLE core_admin_right ( ... );CREATE INDEX index_right ON core_admin_right (level_right, admin_url);|\r\n|Ne pas utiliser la fonctionnalité ON UPDATE CURRENT_TIMESTAMPpermettant de mettre à jour un champ date lors de \r\n					la mise à jour d\'un tuple.|CREATE TABLE ... ( date_login TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL ON UPDATE CURRENT_TIMESTAMP);|CREATE TABLE ... ( date_login TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL);|\r\n|Ne pas utiliser le types de données TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT. Attention utiliser LONG VARCHARécrit en \r\n	deux mots.|TINYTEXTTEXTMEDIUMTEXTLONGTEXT|VARCHAR(255)LONG VARCHARLONG VARCHARLONG VARCHAR|\r\n|Ne pas utiliser le types de données TINYBLOD, BLOD, LONGBLOD, LONGBLOD|TINYBLODBLODLONGBLODLONGBLOD|VARBINARYLONG VARBINARYLONG VARBINARYLONG VARBINARY|\r\n|Ne pas utiliser le type TINYINT|CREATE TABLE ... ( status TINYINT);|CREATE TABLE ... ( status SMALLINT);|\r\n|Suppression des commentaires MySQL générés lors de l\'export d\'une table par exemple.|/*!40101 SET NAMES utf8 */;||\r\n|Ne pas faire d\'insertions multiples en une seule requête SQL|INSERT INTO core_admin_right VALUES (...),(...),(...),(...);|INSERT INTO core_admin_right VALUES (...);INSERT INTO core_admin_right VALUES (...);\r\n	INSERT INTO core_admin_right VALUES (...);|\r\n|Ne pas utiliser le caractère d\'échappement antislash. Pour échapper une simple cote, il faut doubler chaque \r\n	simple cote. Ne pas utiliser de bouble cote pour délimiter un champ, utiliser une simple cote.|L\\\'accès aux ressourcesINSERT INTO core_admin_right VALUES (contenu)Retour chariot\\r\\nNouvelle ligne|L\'\'accès aux ressourcesINSERT INTO core_admin_right VALUES (\'contenu\')Retour chariotbr /Nouvelle ligne|\r\n|Pour limiter les risques d\'incompatibilité toujours préférer stocker les données en binaire lorsque cela est possible|INSERT INTO core_stylesheet (... ) VALUES ( \'xsl:stylesheet version=1.0...\' )|INSERT INTO core_stylesheet (... ) VALUES ( 0x3C3F786D6C207665)|\r\n===Commentaires===\r\n\r\nL’ensemble des éléments de l’application (programmes,\r\nscripts, fichiers de propriétés, …) devra être commenté.\r\nLes commentaires devront être rédigés en anglais.\r\n\r\nPour les programmes Java, l’ensemble des classes et de\r\nleurs méthodes (y compris protected et private) devra\r\ncomporter des commentaires Javadoc contenant une\r\ndescription de la fonctionnalité prise en charge par la\r\nméthode, ainsi que les tags **@param @return @exception** .\r\n\r\nLes modifications réalisées dans les versions successives\r\nseront indiquées par des tags **@version** .\r\n\r\nLes nouvelles méthodes et classes des API indiqueront leur version\r\nd\'introduction à l\'aide de la balise **@since** .\r\n\r\nLes methodes obsolètes seront identifiées à l\'aide de la balise **@deprecated** .\r\n===Respect des normes d’accessibilité===\r\n\r\nDans le cadre de l\'article 47 de la loi n°2005-102 du 12 février 2005, \r\nles collectivités territoriales doivent rendre accessibles leurs sites web \r\nà chaque citoyen quel que soit leur matériel ou logiciel, leur infrastructure réseau, \r\nleur langue maternelle, leur culture, leur localisation géographique, ou leurs \r\naptitudes physiques ou mentales.\r\n\r\nArticle 47 de la loi n° 2005-102\r\n\r\n//Les services de communication publique en ligne des\r\nservices de l\'Etat, des collectivités territoriales\r\net des établissements publics qui en dépendent\r\ndoivent être accessibles aux personnes\r\nhandicapées.// \r\n//L\'accessibilité des services de communication\r\npublique en ligne concerne l\'accès à tout type\r\nd\'information sous forme numérique quels que soient\r\nle moyen d\'accès, les contenus et le mode de\r\nconsultation. Les recommandations internationales\r\npour l\'accessibilité de l\'internet doivent être\r\nappliquées pour les services de communication\r\npublique en ligne.// \r\nLes règles décrites à l’annexe 6.4 rappellent la liste des\r\nrègles relatives à l’accessibilité établies par l’Agence\r\npour le Développement de l’Administration Electronique\r\n(ADAE)\r\n\r\nLe Titulaire s\'engage à respecter, pour l\'ensemble de ses livrables, \r\nles règles décrites dans le référentiel accessibilité des services Internet \r\nde l\'administration française établi par l\'Agence pour le Développement de \r\nl\'Administration Electronique (ADAE devenue DGME).\r\n\r\nDans ce cadre, le Titulaire s\'engage à opérer les corrections nécessaires sur les \r\nprestations réalisées dans le cadre du marché suite à une opération de labellisation ou \r\nde certification basée sur les critères spécifiés dans ce référentiel. '),
(5,'',5,'admin','2014-05-09 08:12:59',0,'==Normes de documentation==\r\n----\r\n\r\nLa documentation de Lutèce est écrite au format XML, puis est générée à l\'aide de \r\nMavenaux formats HTML et PDF.\r\n\r\nUn nombre limité de balises est utilisé, afin de permettre une mise en page \r\nhomogène dans les deux formats.\r\n===Créer une documentation : les règles de base===\r\n\r\nL\'encoding utilisé est UTF-8, les chapitres sont découpés en **section** et **subsection** .\r\n\r\nLe code HTML inclu dans ces chapitres ne doit pas utiliser la balise **br** , mal interpretée lors\r\nde la génération PDF. La balise **p** est donc à utiliser pour effectuer des retours à la ligne.\r\n\r\nLes tables doivent comporter au mmoins un titre en première ligne( **th** )\r\n\r\nLes images doivent mesurer 780px de large (centrer l\'image sur fond blanc), et être créées au format ****.gif** ** .\r\n===Exemples de mise en oeuvre===\r\n\r\nStructure globale du fichier :\r\n\r\n?xml version=1.0 encoding=UTF-8?\r\ndocument\r\nproperties\r\ntitle\r\nLutèce : titre du document\r\n/title\r\n/properties\r\nbody\r\n\r\nsection name=Titre de chapitre 1\r\n...................\r\n/section\r\n\r\n/body\r\n/document\r\n\r\nUn document peut contenir plusieurs sections.\r\n\r\nUne section peut contenir du texte formaté par un paragraphe (**p** ), ainsi qu\'une ou plusieurs sous-section(s)\r\n\r\nExemple : \r\n\r\nsection name=Titre de chapitre 1\r\np\r\nIntroduction du chapitre 1\r\n/p\r\n\r\nsubsection name=Sous-chapitre 1\r\np\r\ntexte ...\r\n/p\r\n/subsection \r\n\r\nsubsection name=Sous-chapitre 2\r\np\r\ntexte ...\r\n/p\r\n/subsection \r\n\r\n/section\r\nLe résultat est le suivant : \r\n\r\n==Titre de chapitre 1==\r\n----\r\n\r\nIntroduction du chapitre 1\r\n===Sous-chapitre 1===\r\n\r\ntexte ...\r\n===Sous-chapitre 2===\r\n\r\ntexte ...\r\n\r\n\r\n\r\nIl est possible d\'inclure une liste dans un paragraphe : \r\n\r\np\r\nul\r\nliexemple de liste 1/li\r\nliexemple de liste 2/li\r\n/ul\r\n/p\r\n\r\np\r\nol\r\nliexemple de liste numérotée 1/li\r\nliexemple de liste numérotée 2/li\r\n/ol\r\n/p\r\nRésultat : \r\n\r\n\r\n* exemple de liste 1\r\n* exemple de liste 2\r\n\r\n\r\n* exemple de liste numérotée 1\r\n* exemple de liste numérotée 2\r\n\r\n\r\nLe texte peut être formaté avec des balise du type **strong** , **em** , **code** \r\np\r\ncodetexte au format code/code\r\n/p\r\np\r\nstrongtexte au format strong/strong\r\n/p\r\np\r\nemtexte au format em/em\r\n/p\r\n\r\nRésultat : \r\n\r\n\r\n* **texte au format code** \r\n* **texte au format strong** \r\n* //texte au format em// \r\n\r\n\r\n\r\nDes exemples de code peuvent être introduit à l\'aide de la balise **pre** : \r\n\r\np \r\ndiv class=source\r\npre\r\napplication\r\napplication-classfr.paris.lutece.plugins.securedtest.SecuredTestApp/application-class\r\napplication-security-model1/application-security-model\r\n/application\r\n/pre\r\n/div\r\n/p\r\n\r\n**Attention :** pour que le rendu soit conforme lors de l\'utilisation de la balise **pre** , \r\nil faut coller le texte à gauche, sans tenir compte de l\'indentation générale du code xml du fichier.\r\n\r\nLe résultat est :\r\n\r\napplication\r\napplication-classfr.paris.lutece.plugins.securedtest.SecuredTestApp/application-class\r\napplication-security-model1/application-security-model\r\n/application\r\n\r\n\r\n\r\nPour insérer un tableau, la syntaxe est la suivante :\r\n\r\np\r\ntable\r\ntr\r\nthTitre 1/th\r\nthTitre 2/th\r\n/tr\r\ntr\r\ntdColonne 1/td\r\ntdColonne 2/td\r\n/tr\r\n/table\r\n/p\r\nCe qui donne le tableau suivant :\r\n\r\n|=Titre 1|=Titre 2|\r\n|Colonne 1|Colonne 2|\r\n\r\n\r\n\r\nPour afficher une copie d\'écran : \r\n\r\np\r\ncenter\r\nimg src=images/logo_lutece.gif /\r\n/center\r\n/p\r\nLa balise **center** n\'est prise en compte que pour la génération HTML.\r\n\r\nPour que l\'image ne soit pas déformée dans la version PDF, une astuce consiste à créer l\'image utilisée pour \r\nla génération de ce format sur une taille de 780px de large (pour un format de sortie A4), \r\nla copie d\'écran étant centrée dans cette largeur.\r\n\r\nLe résultat est : \r\n'),
(6,'',6,'admin','2014-05-09 10:06:16',0,'==Règles de logging==\r\n----\r\n\r\n\r\n===Les logs de Lutèce===\r\nLutèce dispose de plusieurs fichiers de logs :\r\n\r\n* **application.log** contient les principaux événements\r\nde l\'application : chargement des services, des plugins, etc\r\n\r\n* **error.log** contient tous les faits anormaux.\r\n\r\n==Gestion des exceptions==\r\n----\r\n\r\n\r\nToute exception doit être consignée dans un fichier log.\r\n\r\nLes blocs catchne doivent jamais être vide ou faire appel à **e.printStackTrace()** \r\n\r\n===Exceptions non critiques===\r\n\r\nLes exceptions ne nécessitant pas l\'arrêt du traitement en cours doivent être loguées de la manière suivante\r\n\r\n[code]catch( Exception e )\r\n{\r\n[nbsp;    AppLogService.error( e.getMessage() , e );\r\n} [/code]\r\n\r\n===Exceptions critiques===\r\n\r\nLes exceptions nécessitant l\'arrêt du traitement (exemples : erreur SQL, problème\r\nd\'accès fichier, ...) doivent lever une exception dérivée de **LuteceException** (**PhysicalException** , **ClientException** ...). La classe **LuteceException** réalise elle-même l\'écriture dans les logs.\r\nLe traitement du bloc catchsera alors réalisé de la manière suivante :\r\n\r\n[code]catch( Exception e )\r\n{\r\n[nbsp;    throw new AppException( e.getMessage() , e );\r\n} [/code]\r\n\r\n===Exceptions applicatives===\r\n\r\nLes exceptions applicatives, telles que **UserActionException** , sont les seules qui ne nécessitent pas d\'être\r\nloguées car elles correspondent à un cas normal d\'exécution de l\'application.'),
(7,'',7,'admin','2014-05-09 08:29:02',0,'==Tableau des règles Checkstyle et PMD==\r\n----\r\n\r\nLe tableau suivant décrit les règle des outils Checkstyle et PMD retenue\r\npour l\'analyse du code. L\'abréviation **c** dans la colonne //outil// correspondant\r\nà Checkstyle, **p** à PMD\r\n\r\n\r\n|=Fonctionnalité|=Valeur|=Outils|=Nom de la règle dans l\'outil|\r\n|Règles de nommage||||\r\n|Variables locales, finales|^[A-Z]*$ - strict (TODO) : strName, nName ou lName |c|LocalFinalVariableName|\r\n|Variables locales, non finales- attention, paramètres de catch inclus|^[a-z][a-zA-Z0-9]*$ - strict (TODO) : strName, nName ou lName |c|LocalVariableName|\r\n|Attributs non statiques|^_[a-z](_?[a-zA-Z0-9])*$ - strict (TODO) : strName, nName ou lName |c|MemberName|\r\n|Paramètres|^[a-z][a-zA-Z0-9]*$ - strict (TODO) : strName, nName ou lName |c|ParameterName|\r\n|Constantes (champs statiques et finaux)|^[A-Z0-9]*$|c|ConstantName|\r\n|Variables statiques, non finales|^_[a-z](_?[a-zA-Z0-9])*$ - strict (TODO) : strName, nName ou lName |c|StaticVariableName|\r\n|Méthode|[a-z][a-zA-Z0-9]*$|c|MethodName|\r\n|Classe (et interface)|^[A-Z][a-zA-Z0-9]*$|c|TypeName|\r\n|Package|^fr\\.paris\\.[a-z\\.]*$|c|PackageName|\r\n|Classes abstraites|strict seulement : mot clé abstract|c|AbstractClassName|\r\n|Longueur max d\'une variable|80 - strict 50|p|LongVariable|\r\n|Longueur min du nom d\'une méthode|3|p|ShortMethodNameRule|\r\n|Longueur min du nom d\'une variable|non retenu|p|ShortVariable|\r\n\r\n|=Règles non retenues (redondantes)|=|\r\n|PMD|VariableNamingConventionRule, MethodNamingConvention, \r\nClassNamingConventionRule, AbstractNamingRule|\r\n\r\n\r\n\r\n|=Fonctionnalité|=Valeur|=Outils|=Nom de la règle dans l\'outil|\r\n|En-tête de fichiers||||\r\n|Les fichiers doivent tous contenir le même en-tête|${checkstyle.header.file}|c|header|\r\n|L\'en-tête doit correspondre à une expression régulière|non retenu|c|RegexpHeader|\r\n\r\n\r\n\r\n|=Fonctionnalité|=Valeur|=Outils|=Nom de la règle dans l\'outil|\r\n|Imports||||\r\n|Imports inutiles : dupliqué, java.lang.* ou du même package|na|c|RedondantImports|\r\n|Idem précédent + import inutilisée|na|c|UnusedImports|\r\n|Les imports ne doivent pas utiliser *|na|c|AvoidStarImport|\r\n|Vérifie l\'ordre des imports (java, puis javax, …)|non retenu|c|ImportOrder|\r\n|Rejette les packages illegaux (par défaut, slt ceux de sun.*)|na|c|IllegalImport|\r\n\r\n|=Règles non retenues (redondantes)|=|\r\n|PMD|ImportFromSamePackage, UnusedImports, DontimportJavaLang, \r\nDuplicateImport|\r\n\r\n\r\n\r\n|=Fonctionnalité|=Valeur|=Outils|=Nom de la règle dans l\'outil|\r\n|Non respect de longueur||||\r\n|Longueur max d\'une méthode|par défaut : 100 lignes, en comptant les commentaires et les lignes vides|p|ExcessiveMethodLength|\r\n|Longueur max d\'une classe|par défaut : 1000 lignes, en comptant les commentaires et les lignes vides|p|ExcessiveClassLength|\r\n|Nombre max de parametres|par défaut : 7|c|ParameterNumber|\r\n|complexité : nombre de points de décision \r\n(if, while, do, for, ?:, catch, switch, , || et case) + 1 \r\npour la méthode|10 - strict seulement|p|CyclomaticComplexityRule|\r\n|Nombre max de commandes executables|non retenu|c|ExecutableStatementCount|\r\n|Longueur max d\'un fichier|non retenu|c|FileLenght|\r\n|Longueur max d\'une ligne|non retenu|c|LineLength|\r\n|Longueur max pour une classe anonyme interne|non retenu|c|AnonInnerLenght|\r\n|Nombre de méthodes et d\'attributs publics|45|p|ExcessivePublicCount|\r\n\r\n|=Règles non retenues (redondantes)|=|\r\n|PMD|ExcessiveParameterList|\r\n|Checkstyle|MethodLenght, CyclomaticComplexity|\r\n\r\n\r\n\r\n|=Fonctionnalité|=Valeur|=Outils|=Nom de la règle dans l\'outil|\r\n|Espaces||||\r\n|Espace non autorisé si un des éléments du for est vide : for(int i;;i++)|non retenu|c|EmptyForIteratorPad|\r\n|Seuls = et == peuvent (doivent) être suivis par un espace|token=ASSIGN, EQUAL|c|WhitespaceAround|\r\n|Les parenthèses doivent avoir des espaces|space|c|ParenPad|\r\n|Vérifie qu\'il n\'y a pas d\'espace après certains operateurs|non retenu|c|NoWhiteSpaceAfter|\r\n|Vérifie qu\'il n\'y a pas d\'espace avant certains operateurs|non retenu|c|NoWhiteSpaceBefore|\r\n|Vérifie la façon de gérer les longues lignes après les opérateurs|non retenu|c|OperatorWrap|\r\n|Vérifie les espaces pour le cas particulier des cast|non retenu|c|TypeCastParenPad|\r\n|Vérifie qu\'il n\'y a pas de tab dans le code source|non retenu|c|TabCharacter|\r\n|Vérifie que les éléments listés sont bien suivis par un espace|non retenu|c|WhiteSpaceAfter|\r\n\r\n\r\n\r\n|=Fonctionnalité|=Valeur|=Outils|=Nom de la règle dans l\'outil|\r\n|Qualificatifs||||\r\n|L\'ordre des qualificatifs est : public - protected - private - abstract - static - final - transient - volatile - synchronized - native - strictfp|na|c|ModifierOrder|\r\n|Les interfaces ne sont ni publiques ni abstraites, les methodes et attributs prives d\'une classe finale ne sont pas finaux, dans une interfaces les variables ne sont ni publiques ni statiques ni finales|na|c|RedundantModifier|\r\n\r\n\r\n\r\n|=Fonctionnalité|=Valeur|=Outils|=Nom de la règle dans l\'outil|\r\n|Blocs||||\r\n|Les blocs ne peuvent pas être vides (concerne : catch, do, else, finally, if, for, try, while et init)|na|c|EmptyBlock|\r\n|Les blocs switch sont non vides|na|p|EmptySwitchStatements|\r\n|Les blocs synchronized sont non vides|na|p|EmptySynchronizedBlock|\r\n|Vérifie que les accolades ouvrantes ( { ) vont à la ligne|na|c|LeftCurly|\r\n|Vérifie que les blocs de code sont bien entourés d\'accolades {}|na|c|NeedBraces|\r\n|Vérifie que les accolades fermantes ( } ) vont à la ligne|na|c|RightCurly|\r\n|Vérifie qu\'il ne reste pas de bloc {} qui ne servent plus dans le code (laissés après un debuggage)|na|c|AvoidNestedBlocks|\r\n\r\n|=Règles non retenues (redondantes)|=|\r\n|PMD|EmptyCatchBlock, EmptyIfStmt, EmptyWhileStmt, EmptyTryBlock, EmptyFinallyBlock, IfStmtsMustUseBraces, WhileLoopsMustUseBracesRule, IfElseStmtsMustUseBracesRule, ForLoopsMustUseBracesRule|\r\n\r\n\r\n\r\n|=Fonctionnalité|=Valeur|=Outils|=Nom de la règle dans l\'outil|\r\n|Problèmes de code||||\r\n|Eviter les syntaxes de type **?: ** |non retenu|c|AvoidInlineConditionals|\r\n|Vérifier si un test est imbriqué dans un synchronize qui est lui-même imbriqué dans le même test\r\nEX : **if ( theInstance == null ) { synchronized( MySingleton.class ) { if ( theInstance == null ) { theInstance = new MySingleton(); }}}** |na|c|Double checked locking|\r\n|Détecter les instructions vides (;)|na|c|EmptyStatement|\r\n|Si on surcharge equals [resp hashcode] alors on doit surcharger hashcode [resp equals]|na|c|EqualsHashCode|\r\n|Une variable ou un paramètre local ne doit pas risquer d\'écraser un attribut|na|c|HiddenField|\r\n|Simplifier les retours de booleens - ex : on doit avoir return (! isValid()) au lieu de if (isValid()) return false; else return true;|na|c|SimplifyBooleanReturn|\r\n|Inutile de tester avec == true ou !false …|na|c|SimplifyBooleanExpression|\r\n|Vérifie que l\'on n\'a pas de nombre qui ne soit pas une constante (à part -, 0, 1, et 2) |strict seulement|c|MagicNumber|\r\n|Vérifie que les switch on bien un default case|na|c|MissingSwitchDefault|\r\n|Vérifie qu\'il ne reste pas une virgule après le dernier élément en initialisant un array|na|c|ArrayTrailingComma|\r\n|Vérifie que si on définit un equals on a surchargé aussi equals(java.lang.Object)|na|c|CovariantEquals|\r\n|Vérifie que l\'on définit bien dans l\'ordre : les attributs statiques, publics, protected, ceux pour le package (sans getter ni setter), privés; les constructeurs; les méthodes.|na|c|DeclarationOrder|\r\n|Vérifie que l\'on n\'initialise pas des objets inutilement (comme int i=0; ou object o=null;)|na|c|ExplicitInitialization|\r\n|Les paramètres et variables qui ne sont jamais modifiés doivent être déclarés final|non retenu|c|FinalLocalVariable|\r\n|Vérifie que l\'on ne catche pas de mauvaise exception (**java.lang.Exception** , **java.lang.Error** ou **java.lang.RuntimeException** )|non retenu|c|FinalLocalVariable|\r\n|Vérifie que l\'on utilise bien des factory quand il le faut|non retenu|c|IllegalInstantiation|\r\n|Interdit certains token (comme ++)|non retenu|c|IllegalToken|\r\n|Interdit les valeurs definies par type (par ex : pas de string qui ont la valeur a href, pas d\'entier qui commence par 0, …)|non retenu|c|IllegalTokenText|\r\n|Interdit certains type/certaines classes|non retenu|c|IllegalType|\r\n|Interdit les affectations dans les expressions|na|c|InnerAssignment|\r\n|Limite le nombre de if-else imbriqués|3|c|NestedIfDepth|\r\n|Limite le nombre de try imbriqués|3|c|NestedTryDepth|\r\n|Chaque classe doit avoir un packages|na|c|PackageDeclaration|\r\n|Les paramètres ne doivent pas être affectés|na|c|ParameterAssignment|\r\n|Vérifie que l\'on ne lance pas 2 fois la même exception, ni une exception unchecked, ni une exception qui soit une sous classe d\'une exception déjà lancée|na|c|RedundantThrows|\r\n|Limite le nombre de return|5|c|ReturnCount|\r\n|Vérifie que l\'on ne compare pas de strings avec == ou !=|na|c|StringLiteralEquality|\r\n|Vérifie que lorsqu\'on surcharge clone(), on appelle super.clone()|na|c|SuperClone|\r\n|Vérifie que lorsqu\'on surchage finalize(), on appelle super.finalize()|na|c|SuperFinalize|\r\n|Vérifie l\'imbrication de boucles for|2|p|JumbledIncrementer|\r\n|Certaines boucles for peuvent/doivent être remplacées par des while|na|p|ForLoopShouldBeWhileLoop|\r\n|Il vaut mieux convertir dans le return que dans une variable temporaire|na|p|UnnecessaryConversionTemporaryRule|\r\n|Vérifie que l\'on ne fait pas de return dans un finally|non retenu|p|ReturnFromFinallyBlock|\r\n|Détecte les return; inutiles|na|p|UnnecessaryReturn|\r\n|Détecte les champs privés non utilisés|na|p|UnusedPrivateField|\r\n|Détecte les variables locales non utilisées|na|p|UnusedLocalVariable|\r\n|Détecte les méthodes privées non utilisées|na|p|UnusedPrivateMethod|\r\n|Détecte les paramètres non utilisés|na|p|UnusedFormalParameter|\r\n|Une classe qui n\'a que des méthodes statiques devrait être un singleton|na en strict seulement|p|UnusedLocalVariable|\r\n|Utiliser l\'interface (ex : Set) plutot que son implementation (ex HashSet)|na|p|LooseCouplingRule|\r\n|Il vaut mieux utiliser une variable locale que de réutiliser un paramètre|na|p|AvoidReassigningParametersRule|\r\n|Vérifie la taille du switch (longueur max du case)|5|p|SwitchDensity|\r\n|Le constructeur ne doit pas appeler de méthode surchargée|na|p|ConstructorCallsOverridableMethodRule|\r\n|Ne pas appeler de constructeur privé en dehors de la classe du constructeur|na|p|AccessorClassGenerationRule|\r\n|Un champ final constant doit être statique|na|p|FinalFieldCouldBeStatic|\r\n|Les connexions doivent toujours être fermées|strict seulement|p|CloseConnectionRule|\r\n|Si la même chaine est utilisée plusieurs fois, elle doit devenir une constante|4|p|AvoidDuplicateLiterals|\r\n|Ne pas instantier les strings avec un new|na|p|StringInstantiation|\r\n|Inutile d\'utiliser toString() sur un string|na|p|StringToString|\r\n|Considère qu\'un objet est trop couplé avec un autre si le nombre d\'attributs, variables locales et types retournés est trop important|20|p|CouplingBetweenObjectsRule|\r\n|Trop d\'imports indique que l\'objet est trop couplé|25|p|ExcessiveImportsRule|\r\n|Une méthode ne doit pas lancer d\'exception de type Exception|non retenu|p|SignatureDeclareThrowsException|\r\n|Il est plus propre de catcher chaque type d\'exception (plutot que de catcher Exception et de faire des instanceof ensuite)|na|p|ExceptionTypeChecking|\r\n\r\n|=Règles non retenues (redondantes)|=|\r\n|PMD|OverrideBothEqualsAndHashcodeRule, DoubleCheckedLockingRule, SimplifyBooleanReturnsRule, SimplifyBooleanExpressions, SwitchStmtsShouldHaveDefault, AvoidDeeplyNestedIfStmts, BooleanInstantiation, ProperCloneImplementationRule, AvoidCatchingThrowable, AssignmentInOperandRule|\r\n\r\n\r\n\r\n|=Fonctionnalité|=Valeur|=Outils|=Nom de la règle dans l\'outil|\r\n|Problèmes de design||||\r\n|Une méthode non privée et non statique d\'une classe qui peut être spécialisée doit être ou abstraite, ou finale, ou vide|na strict seulement|c|DesignForExtension|\r\n|Une classe qui n\'a que des constructeurs privés doit être déclarée finale|na|c|FinalClass|\r\n|Une classe qui ne contient que des méthodes statiques ne doit pas avoir de constructeur public|na|c|HideUtilityClassConstructor|\r\n|Les interfaces ne doivent définir que des types (pas d\'interface qui ne contient aucune methode, que des constantes)|na strict seulement|c|InterfaceIsType|\r\n|Seuls les attributs statiques ET finaux peuvent être publics|na|c|VisibilityModifier|\r\n|Vérifie que les classes d\'exceptions n\'ont que des champs finaux|na|c|MutableException|\r\n|Vérifie le nombre max de throw|non retenu|c|ThrowsCount |\r\n|Détecte quand il n\'y a qu\'un seul constructeur, public, vide et sans argument|non retenu|p|UnnecessaryConstructorRule|\r\n|Vérifie qu\'on n\'assigne pas null à des objets|na|p|NullAssignment|\r\n|Vérifie qu\'il n\'y a qu\'un seul retour par fonction|non retenu|p|OnlyOneReturn|\r\n|Détecte les public static etc inutiles|na|p|UnusedModifier|\r\n|Oblige chaque classe à avoir un constructeur|non retenu|p|AtLeastOneConstructor|\r\n|Déclarer finalize() protected si on le surcharge|na|p|FinalizeShouldBeProtected|\r\n\r\n\r\n\r\n|=Fonctionnalité|=Valeur|=Outils|=Nom de la règle dans l\'outil|\r\n|Javadoc||||\r\n|Chaque package doit avoir un fichier package.html|non retenu|c|PackageHtml|\r\n|Vérifie qu\'il y a un javadoc pour la classe (ou l\'interface)|na|c|JavadocType|\r\n|Les variables doivent être commentées)|strict seulement|c|JavadocVariable|\r\n|Les classes doivent être commentées (au minimum : @return, @param, @throws et @see)|na|c|JavadocMethod|\r\n|Valide le contenu des commentaires : phrase complète, tags HTML bien formés, …|non retenu|c|JavadocStyle|\r\n\r\n\r\n\r\n|=Fonctionnalité|=Valeur|=Outils|=Nom de la règle dans l\'outil|\r\n|Junit||||\r\n|Il est nécessaire d\' utiliser les assertions avec message|na|p|JUnitAssertionsShouldIncludeMessageRule|\r\n|suite() doit être publique ET statique|na|p|JUnitStaticSuite|\r\n|Vérifie que setUp et tearDown sont bien orthographiées|na|p|JUnitSpelling|\r\n\r\n\r\n\r\n|=Fonctionnalité|=Valeur|=Outils|=Nom de la règle dans l\'outil|\r\n|Divers||||\r\n|Détecte le code dupliqué|non retenu|c|StrictDuplicateCode|\r\n|Vérifie que la déclaration d\'un tableau est conforme au style retenu (Java-style: **public static void main(String[] args)** ou C-style: **public static void main(String args[]))** |style Java|c|ArrayTypeStyle|\r\n|Restreint certains tokens à l\'intérieur de certains autres|non retenu|c|DescendantToken|\r\n|Vérifie que les paramètres sont finaux (sauf pour les interfaces)|non retenu|c|FinalParameters|\r\n|grep pour une expression régulière donnée|System\\.out\\.println, System\\.exit|c|GenericIllegalRegexp|\r\n|Vérifie l\'indentation|non retenu|c|Indentation|\r\n|Vérifie que tous les fichiers terminent bien par un retour a la ligne|non retenu|c|NewlineAtEndOfFile|\r\n|Cherche les commentaires TODO: |non retenu|c|TodoComment|\r\n|Vérifie que les fichiers properties de différents langages contiennent les mêmes clés|na|c|Translation|\r\n|Détecte les méthodes main non commentées|non retenu|c|UncommentedMain|\r\n|Les constantes de type long doivent commencer par L|non retenu|c|UpperEll|'),
(8,'',8,'admin','2014-05-09 10:03:31',0,'==Les plugins de Lutece==\r\n----\r\n\r\nLes plugins sont des composants que l\'on peut ajouter à\r\nLutèce pour étendre ses fonctionnalités. Ils ont pour vocation\r\nd\'intégrer différents types de fonctionnalités en respectant le\r\nmême mode d\'installation. La démarche commune d\'installation\r\nd\'un plugin est la suivante :\r\n* Arrêter la Webapp\r\n* Dézipper la distribution binaire du plugin dans le répertoire de la webapp\r\n* [ facultatif] Exécuter les scripts de création et/ou d\'initialisation des tables associées au plugin (Cf.\r\nci-dessous pour localiser ces scripts dans les différentes distributions)\r\n* [ facultatif ] Configurer le fichier properties du plugin\r\n* [ facultatif ] Configurer le fichier db.properties de Lutece pour ajouter un nouveau pool de connexions spécifique\r\nau plugin\r\n* Relancer la Webapp\r\n* Se connecter en Admin et se rendre dans la fonction Gestion des plugins\r\n* Le nouveau plugin doit apparaitre non installé dans la liste des plugins. Cliquer sur Installer.\r\n* [ facultatif ] Sélectionner le pool de connexions éventuellement utilisé par le plugin.\r\n===Les extensions apportés par les plugins===\r\n\r\nPlusieurs types d\'extensions sont prévues :\r\n* nouveau type de porlet [ Portlets]\r\n* nouvelle application intégrée [ Application]\r\n* nouvelle fonctionnalité d\'administration [ Fonctions d\'administration]\r\n* nouveau service de contenu [ ContentServices]\r\n* nouveau service d\'insertion de liens [ InsertServices]\r\n* nouveau service d\'inclusions de page [ PageIncludeServices]\r\n* nouvelle servlet ou filtre de servlet [ PageIncludeServices]\r\n\r\nUn plugin peut contenir un ou plusieurs types d\'extensions. Par\r\nexemple, il peut introduire un nouveau type de portlet et deux\r\nfonctions d\'administration pour gérer de ce type de\r\nportlet.\r\n\r\nEn résumé, un plugin peut contenir :\r\n\r\n* 0 à n applications\r\n* 0 à n feuilles de style CSS spécifiques\r\n* 0 à n scripts Javascript spécifiques\r\n* 0 à n fonctions d\'administration\r\n* 0 à n portlets\r\n* 0 à 1 service de contenu\r\n* 0 à 1 services d\'insertion de type LinkService\r\n* 0 à 1 services d\'insertion de type HtmlService\r\n* 0 à n servlets ou filtres de servlet\r\n* 0 à n tableau de bord (dashboard)\r\n===Les plugins et les bases de données===\r\n\r\nUn plugin peut accéder à deux bases de données. Il peut\r\naccéder à la base Lutece par le biais de la classe\r\n**AppConnectionService** , mais il est également possible de\r\nlui affecter un pool de connexions spécifique, préalablement\r\ndéclaré dans le fichier **db.properties** , au moment de son\r\ninstallation.\r\n===Chargement des plugins===\r\n\r\nLes plugins sont chargés au démarrage de la webapp par le\r\nservice **PluginService** qui recherche tous les fichiers\r\nXML se trouvant dans le répertoire **/WEB-INF/plugins** . Pour ne\r\npas charger un plugin, il suffit de retirer le fichier XML de\r\nce répertoire.\r\n\r\nLes informations sur le statut local des plugins (état\r\ninstallé/non-installé, pool de connection spécifique, ...) sont\r\nenregistrées dans le fichier **plugins.dat** situé dans le même\r\nrépertoire.\r\n\r\nSi un plugin dispose d\'un fichier properties, celui doit se\r\ntrouver dans le répertoire **/WEB-INF/conf/plugins** . Les\r\npropriétés de ce plugins seront automatiquement chargées et\r\najoutées à l\'ensemble des propriétés de l\'application. Elles\r\nseront alors accessibles par le biais de la classe\r\n**AppPropertiesService** .\r\nToutes les propriétés d\'un plugin doivent être préfixées par le nom du\r\nplugin pour éviter notamment tout conflit.\r\n===Les fichiers des plugins===\r\n\r\nUn plugin peut nécessiter un ensemble assez important et\r\ndivers de fichiers. Voici les répertoires désignés pour\r\ncontenir ces fichiers\r\n\r\n|=Type de fichier|=Répertoire|\r\n|Les JSP des fonctions d\'administration|/jsp/admin/plugins/[lt;plugin_name[gt;/*.jsp|\r\n|Les JSP accessibles du portail|/jsp/site/plugins/[lt;plugin_name[gt;/*.jsp|\r\n|Les images des fonctions d\'administration|/images/admin/skin/plugins/[lt;plugin_name[gt;|\r\n|Les images de présentation de l\'application|/images/local/skin/[lt;plugin_name[gt;/*.*|\r\n|Les images gérées comme des données du plugin|/images/local/data/[lt;plugin_name[gt;/*.*|\r\n|Le fichier properties du plugin|/WEB-INF/conf/plugins/[lt;plugin_name[gt;.properties|\r\n|Le fichier de définition du plugin|/WEB-INF/plugins/[lt;plugin_name[gt;.xml|\r\n|Les templates des fonctions d\'administration|/WEB-INF/templates/admin/plugins/[lt;plugin_name[gt;.properties|\r\n|Les templates de l\'application accessibles du portail|/WEB-INF/templates/skin/plugins/[lt;plugin_name[gt;.properties|\r\n|Le fichier jar contenant les classes du plugin|/WEB-INF/lib/plugin_[lt;plugin_name[gt;_[lt;version[gt;.jar|\r\n|Les scripts SQL d\'installation et d\'initialisation des tables du plugin (distribution binaires)|/WEB-INF/sql/plugins/[lt;plugin_name[gt;/*.sql|\r\n\r\nL\'organisation des fichiers sources est par ailleurs la\r\nsuivante\r\n\r\n|=Type de fichier|=Répertoire|\r\n|Les fichiers sources java de la couche métier|/src/java/fr/lutece/plugins/[lt;plugin_name[gt;/business/*.java|\r\n|Les fichiers sources java de la couche service|/src/java/fr/lutece/plugins/[lt;plugin_name[gt;/service/*.java|\r\n|Les fichiers sources java de la couche présentation|/src/java/fr/lutece/plugins/[lt;plugin_name[gt;/web/*.java|\r\n|Les ressources de type messages dans les différentes langues|/src/java/fr/lutece/plugins/[lt;plugin_name[gt;/resources/*.properties|\r\n|Les scripts SQL d\'installation et d\'initialisation des tables du plugin (distribution sources)|/src/sql/plugins/[lt;plugin_name[gt;/*.sql|\r\n|Les documentations au format XML pour Maven|/src/site/xdoc/[fr/]/xdoc/plugins/[lt;plugin_name[gt;/*.xml|\r\n===Le fichier de configuration du plugin===\r\n\r\nLe fichier de configuration d\'un plugin est un fichier XML\r\nse présentant sous la forme suivante :\r\n\r\n[code][lt;?xml version=1.0 encoding=ISO-8859-1?[gt;\r\n[lt;plug-in[gt;\r\n[nbsp;     [lt;name[gt;myplugin[lt;/name[gt;\r\n[nbsp;     [lt;class[gt;fr.paris.lutece.portal.service.PluginDefaultImplementation[lt;/class[gt;\r\n[nbsp;     [lt;version[gt;1.0[lt;/version[gt;\r\n[nbsp;     [lt;description[gt;Description of the plugin[lt;/description[gt;\r\n[nbsp;     [lt;provider[gt;Mairie de Paris[lt;/provider[gt;\r\n[nbsp;     [lt;provider-url[gt;http://lutece.paris.fr[lt;/provider-url[gt;\r\n[nbsp;     [lt;icon-url[gt;../../images/admin/skin/plugins/myplugin/myplugin.gif[lt;/icon-url[gt;\r\n[nbsp;     [lt;copyright[gt;Copyright (c) 2001-2008 Mairie de Paris[lt;/copyright[gt;\r\n\r\n[nbsp;     [lt;!-- Le plugin requiert-il un pool de connexions : 1 - oui, 0 - non --[gt;\r\n[nbsp;     [lt;db-pool-required[gt;1[lt;/db-pool-required[gt;\r\n\r\n[nbsp;     [lt;!-- Feuilles de style CSS spécifiques éventuelles --[gt;\r\n[nbsp;     [lt;css-stylesheets[gt;\r\n[nbsp;     [lt;css-stylesheet[gt;myplugin/myplugin.css[lt;/css-stylesheet[gt;\r\n[nbsp;     [lt;/css-stylesheets[gt;\r\n\r\n[nbsp;     [lt;!-- Scripts eventuels --[gt;\r\n[nbsp;     [lt;javascript-files[gt;\r\n[nbsp;            [lt;javascript-file[gt;myplugin/myplugin.css[lt;/javascript-file[gt;\r\n[nbsp;     [lt;/javascript-files[gt;\r\n\r\n[nbsp;     [lt;!-- Listes des fonctionnalités d\'administration éventuellement introduites par le plugin--[gt;\r\n[nbsp;     [lt;admin-features[gt;\r\n[nbsp;            [lt;admin-feature[gt;\r\n[nbsp;                   [lt;feature-id[gt;MYFEATURE_MANAGEMENT[lt;/feature-id[gt;\r\n[nbsp;                   [lt;feature-title[gt;My Feature[lt;/feature-title[gt;\r\n[nbsp;                   [lt;feature-description[gt;Description of my feature[lt;/feature-description[gt;\r\n[nbsp;                   [lt;feature-level[gt;3[lt;/feature-level[gt;\r\n[nbsp;                   [lt;feature-url[gt;plugins/myplugin/ManageMyFeature.jsp[lt;/feature-url[gt;\r\n[nbsp;            [lt;/admin-feature[gt;\r\n...\r\n[nbsp;     [lt;/admin-features[gt;\r\n\r\n[nbsp;     [lt;!-- Listes des portlets éventuellement introduits par le plugin--[gt;\r\n[nbsp;     [lt;portlets[gt;\r\n[nbsp;            [lt;portlet[gt;\r\n[nbsp;                   [lt;portlet-class[gt;fr.paris.lutece.plugins.myportlet.business.portlet.MyPortletHome[lt;/portlet-class[gt;\r\n[nbsp;                   [lt;portlet-type-name[gt;MyNew Portlet[lt;/portlet-type-name[gt;\r\n[nbsp;                   [lt;portlet-creation-url[gt;plugins/article/CreatePortletMyPortlet.jsp[lt;/portlet-creation-url[gt;\r\n[nbsp;                   [lt;portlet-update-url[gt;plugins/article/ModifyPortletMyPortlet.jsp[lt;/portlet-update-url[gt;\r\n[nbsp;            [lt;/portlet[gt;\r\n...\r\n[nbsp;     [lt;/portlets[gt;\r\n\r\n[nbsp;     [lt;!-- Application à base de pages spéciales introduite éventuellement par le plugin --[gt;\r\n[nbsp;     [lt;applications[gt;\r\n[nbsp;            [lt;application[gt;\r\n[nbsp;                   [lt;application-id[gt;app_page_name[lt;/application-id[gt;\r\n[nbsp;                   [lt;application-class[gt;fr.paris.lutece.plugins.myplugin.web.MyPluginApp[lt;/application-class[gt;\r\n[nbsp;                   [lt;application-roles[gt;role1,role2[lt;/application-roles[gt;\r\n[nbsp;            [lt;/application[gt;\r\n[nbsp;     [lt;/applications[gt;\r\n\r\n[nbsp;     [lt;!-- Content Service --[gt;\r\n[nbsp;     [lt;content-service[gt;\r\n[nbsp;            [lt;content-service-class[gt;fr.paris.lutece.plugins.myplugin.service.MyContentService[lt;/content-service-class[gt;\r\n[nbsp;     [lt;/content-service[gt;\r\n\r\n[nbsp;     [lt;!-- Links Service --[gt;\r\n[nbsp;            [lt;link-service[gt;\r\n[nbsp;                   [lt;link-service-id[gt;mylinkservice[lt;/link-service-id[gt;\r\n[nbsp;                   [lt;link-service-class[gt;fr.paris.lutece.plugins.mylinkservice.service.MyLinkService[lt;/link-service-class[gt;\r\n[nbsp;                   [lt;link-service-bean-class[gt;fr.paris.lutece.plugins.mylinkservice.web.MyLinkServiceJspBean[lt;/link-service-bean-class[gt;\r\n[nbsp;                   [lt;link-service-label[gt;Link to my URIs[lt;/link-service-label[gt;\r\n[nbsp;            [lt;/link-service[gt;\r\n\r\n[nbsp;     [lt;servlets[gt;\r\n\r\n[nbsp;            [lt;servlet[gt;\r\n[nbsp;                   [lt;servlet-name[gt;myServlet1[lt;/servlet-name[gt;\r\n[nbsp;                   [lt;url-pattern[gt;/servlet/plugins/myplugin/myServlet1[lt;/url-pattern[gt;\r\n[nbsp;                   [lt;servlet-class[gt;fr.paris.lutece.plugins.myplugin.web.MyFirstServlet[lt;/servlet-class[gt;\r\n[nbsp;            [lt;/servlet[gt;\r\n\r\n[nbsp;            [lt;servlet[gt;\r\n[nbsp;                   [lt;servlet-name[gt;myServlet2[lt;/servlet-name[gt;\r\n[nbsp;                   [lt;url-pattern[gt;/servlet/plugins/myplugin/myServlet2[lt;/url-pattern[gt;\r\n[nbsp;                   [lt;servlet-class[gt;fr.paris.lutece.plugins.myplugin.web.MySecondServlet[lt;/servlet-class[gt;\r\n[nbsp;            [lt;/servlet[gt;\r\n\r\n[nbsp;     [lt;/servlets[gt;\r\n\r\n[nbsp;     [lt;!-- filters --[gt;\r\n[nbsp;     [lt;filters[gt;\r\n[nbsp;            [lt;filter[gt;\r\n[nbsp;                   [lt;filter-name[gt;myFilter[lt;/filter-name[gt;\r\n[nbsp;                   [lt;url-pattern[gt;/*[lt;/url-pattern[gt;\r\n[nbsp;                   [lt;filter-class[gt;fr.paris.lutece.plugins.myplugin.web.MyFilter[lt;/filter-class[gt;\r\n\r\n[nbsp;                   [lt;init-param[gt;\r\n[nbsp;                          [lt;param-name[gt;param1[lt;/param-name[gt;\r\n[nbsp;                          [lt;param-value[gt;value of param1[lt;/param-value[gt;\r\n[nbsp;                   [lt;/init-param[gt;\r\n\r\n[nbsp;            [lt;/filter[gt;\r\n[nbsp;     [lt;/filters[gt;\r\n\r\n[lt;/plug-in[gt;[/code]\r\n\r\n\r\nUne DTD des plugins est disponible dans le répertoire\r\n/WEB-INF/plugins de la Webapp de Lutece.\r\n===Modules===\r\n\r\nCertains plugins peuvent avoir leurs propres plugins. Ceux-ci sont appelés\r\nmodules. Les plugins tels que mylutece, formengine, codewizard disposent\r\nde modules.\r\n\r\nLes règles concernant les modules sont les suivantes :\r\n\r\n|=Type de fichier|=Répertoire|\r\n|Packages des fichiers sources java|/src/java/fr/lutece/plugins/[lt;plugin_name[gt;/modules/[lt;module_name[gt;/**/*.java|\r\n|Localisation des fichiers templates HTML|/plugins/[lt;plugin_name[gt;/modules/[lt;module_name[gt;/**/*.html|\r\n|Nom et emplacement du fichier XML du plugin|/WEB-INF/plugins/[lt;plugin_name[gt;-[lt;module_name[gt;.xml|\r\n|Nom et emplacement du fichier de configuration|/WEB-INF/conf/plugins/[lt;plugin_name[gt;-[lt;module_name[gt;.properties|'),(11,'',10,'toto','2014-05-09 10:14:34',0,'==Créer des nouvelles fonctionnalités d\'administration==\r\n----\r\n\r\nLes fonctionnalités d\'administration correspondent à l\'ensemble\r\ndes fonctions disponibles dans le module\r\nadministrateur quelque soit son niveau d\'accès : administrateur\r\ntechnique, webmestre ou intervenant local.\r\n\r\nPour chaque fonctionnalité correspond un droit qui peut être\r\nattribué à un utilisateur. Ce droit est nivelé pour distinguer\r\nles différents profils d\'utilisateurs. Les valeurs des niveaux\r\nde droits sont les suivantes :\r\n\r\n\r\n* 0 - Administrateur technique\r\n* 1 - Producteur de contenu\r\n* 2 - Webmestre\r\n* 3 - Intervenant local\r\n\r\nLorsque l\'utilisateur est autorisé, la fonctionnalité\r\ns\'affiche dans son menu d\'accueil sous la forme d\'un titre et\r\nd\'une description. En cliquant sur le lien, l\'utilisateur\r\naccède à la JSP qui est le point d\'entrée de la\r\nfonctionnalité.\r\n\r\nCette JSP porte généralement un nom de type **Manage[lt;MyFeature[gt;.jsp.** \r\nLe code de la JSP doit vérifier que l\'utilisateur courant est\r\nauthorisé, et si c\'est le cas elle appelera la méthode du\r\nJspBean associé à la fonctionnalité (typiquement\r\nMyFeatureJspBean) restituant la page d\'accueil de\r\ncelle-ci.\r\n\r\n[code][lt;%@ include file=../PluginAdminHeader.jsp %[gt;\r\n\r\n[lt;jsp:useBean id=myFeature scope=session class=fr.paris.lutece.plugins.myplugin.web.MyFeatureJspBean /[gt;\r\n[lt;jsp:useBean id=user scope=session class=fr.paris.lutece.portal.web.user.UserJspBean /[gt;\r\n\r\n[lt;%\r\nif( user.check( MYFEATURE_MANAGEMENT ) )\r\n{\r\n%[gt;\r\n[nbsp;    [lt;%= myFeature.getManageMyFeature(request) %[gt;\r\n[lt;%\r\n}\r\nelse\r\n{\r\n[nbsp;    response.sendRedirect(user.getPluginAccessDeniedUrl() );\r\n}\r\n%[gt;\r\n[lt;%@ include file=../../AdminFooter.jsp %[gt; [/code]\r\nNB : La JSP de la fonctionnalité reçoit en paramètre de\r\nla requête HTTP le nom du plugin auquel elle est associée\r\n(paramètre plugin_name). Ceci permet à deux plugins de\r\npartager les mêmes fonctionnalités dans des contextes\r\ndifférents.\r\n\r\n===Définition d\'une fonctionnalité d\'administration dans le fichier de configuration d\'un plugin===\r\n\r\nPour installer une nouvelle fonctionnalité à Lutèce,\r\ncelle-ci doit être packagée dans un plugin. [ HOWTO - Plugins].\r\n\r\nLa définition de la fonctionnalité dans le fichier de\r\nconfiguration du plugin se fait par l\'ajout des lignes\r\nsuivantes :\r\n\r\n[code][lt;admin-feature[gt;\r\n[nbsp;    [lt;feature-id[gt;MYFEATURE_MANAGEMENT[lt;/feature-id[gt;\r\n[nbsp;    [lt;feature-title[gt;My Feature[lt;/feature-title[gt;\r\n[nbsp;    [lt;feature-description[gt;Description of my feature[lt;/feature-description[gt;\r\n[nbsp;    [lt;feature-level[gt;3[lt;/feature-level[gt;\r\n[nbsp;    [lt;feature-url[gt;plugins/myplugin/ManageMyFeature.jsp[lt;/feature-url[gt;\r\n[lt;/admin-feature[gt;[/code]'),
(9,'',9,'admin','2014-05-09 12:14:34',0,'==Créer des nouvelles fonctionnalités d\'administration==\r\n----\r\n\r\nLes fonctionnalités d\'administration correspondent à l\'ensemble\r\ndes fonctions disponibles dans le module\r\nadministrateur quelque soit son niveau d\'accès : administrateur\r\ntechnique, webmestre ou intervenant local.\r\n\r\nPour chaque fonctionnalité correspond un droit qui peut être\r\nattribué à un utilisateur. Ce droit est nivelé pour distinguer\r\nles différents profils d\'utilisateurs. Les valeurs des niveaux\r\nde droits sont les suivantes :\r\n\r\n\r\n* 0 - Administrateur technique\r\n* 1 - Producteur de contenu\r\n* 2 - Webmestre\r\n* 3 - Intervenant local\r\n\r\nLorsque l\'utilisateur est autorisé, la fonctionnalité\r\ns\'affiche dans son menu d\'accueil sous la forme d\'un titre et\r\nd\'une description. En cliquant sur le lien, l\'utilisateur\r\naccède à la JSP qui est le point d\'entrée de la\r\nfonctionnalité.\r\n\r\nCette JSP porte généralement un nom de type **Manage[lt;MyFeature[gt;.jsp.** \r\nLe code de la JSP doit vérifier que l\'utilisateur courant est\r\nauthorisé, et si c\'est le cas elle appelera la méthode du\r\nJspBean associé à la fonctionnalité (typiquement\r\nMyFeatureJspBean) restituant la page d\'accueil de\r\ncelle-ci.\r\n\r\n[code][lt;%@ include file=../PluginAdminHeader.jsp %[gt;\r\n\r\n[lt;jsp:useBean id=myFeature scope=session class=fr.paris.lutece.plugins.myplugin.web.MyFeatureJspBean /[gt;\r\n[lt;jsp:useBean id=user scope=session class=fr.paris.lutece.portal.web.user.UserJspBean /[gt;\r\n\r\n[lt;%\r\nif( user.check( MYFEATURE_MANAGEMENT ) )\r\n{\r\n%[gt;\r\n[nbsp;    [lt;%= myFeature.getManageMyFeature(request) %[gt;\r\n[lt;%\r\n}\r\nelse\r\n{\r\n[nbsp;    response.sendRedirect(user.getPluginAccessDeniedUrl() );\r\n}\r\n%[gt;\r\n[lt;%@ include file=../../AdminFooter.jsp %[gt; [/code]\r\nNB : La JSP de la fonctionnalité reçoit en paramètre de\r\nla requête HTTP le nom du plugin auquel elle est associée\r\n(paramètre plugin_name). Ceci permet à deux plugins de\r\npartager les mêmes fonctionnalités dans des contextes\r\ndifférents.\r\n\r\n===Définition d\'une fonctionnalité d\'administration dans le fichier de configuration d\'un plugin===\r\n\r\nPour installer une nouvelle fonctionnalité à Lutèce,\r\ncelle-ci doit être packagée dans un plugin. [ HOWTO - Plugins].\r\n\r\nLa définition de la fonctionnalité dans le fichier de\r\nconfiguration du plugin se fait par l\'ajout des lignes\r\nsuivantes :\r\n\r\n[code][lt;admin-feature[gt;\r\n[nbsp;    [lt;feature-id[gt;MYFEATURE_MANAGEMENT[lt;/feature-id[gt;\r\n[nbsp;    [lt;feature-title[gt;My Feature[lt;/feature-title[gt;\r\n[nbsp;    [lt;feature-description[gt;Description of my feature[lt;/feature-description[gt;\r\n[nbsp;    [lt;feature-level[gt;3[lt;/feature-level[gt;\r\n[nbsp;    [lt;feature-url[gt;plugins/myplugin/ManageMyFeature.jsp[lt;/feature-url[gt;\r\n[lt;/admin-feature[gt;[/code]');